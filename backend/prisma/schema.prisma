generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  telegramId      String   @unique
  fullName        String
  login           String   @unique
  password        String
  fio             String
  schoolId        String?
  school          School?  @relation("UserSchoolRelation", fields: [schoolId], references: [id])
  tickets         Ticket[]
  admin           Admin?
  createdAt       DateTime @default(now())
  directedSchools School[] @relation("DirectorRelation")
  owner           Boolean  @default(false)
}

model School {
  id               String          @id @default(uuid())
  name             String
  street           String
  fullNameDirector String
  institutionType  InstitutionType
  directorId       String
  director         User            @relation("DirectorRelation", fields: [directorId], references: [id])
  users            User[]          @relation("UserSchoolRelation")
  tickets          Ticket[]        @relation("SchoolTicketRelation")
  admins           Admin[]
}

model Ticket {
  id           String       @id @default(uuid())
  name         String
  content      String
  imageUrl     String?
  status       TicketStatus @default(PENDING)
  type         TicketType   @default(Complaint)
  response     String?
  ai_response  String?
  ai_status    AiStatus?
  ai_prioritet AiPrioritet?
  isAnonymous  Boolean      @default(false)
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  schoolId     String
  school       School       @relation("SchoolTicketRelation", fields: [schoolId], references: [id])
  createdAt    DateTime     @default(now())
}

model Admin {
  id         String  @id @default(uuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id])
  schoolId   String
  school     School  @relation(fields: [schoolId], references: [id])
  isDirector Boolean @default(false)
}

model BlackList {
  id         String   @id @default(uuid())
  telegramId String   @unique
  reason     String?
  createdAt  DateTime @default(now())
}

enum AiStatus {
  USEFUL
  NOT_USEFUL
  SPAM
}

enum AiPrioritet {
  low
  medium
  critical
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  CLOSED
}

enum TicketType {
  Complaint
  Technical
  Maintenance
  Schedule
  Event
  Discipline
  Suggestion
  Other
}

enum InstitutionType {
  School
  College
  University
  Sadik
}
